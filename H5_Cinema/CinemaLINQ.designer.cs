#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace H5_Cinema
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cinema")]
	public partial class CinemaLINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBackTicket(BackTicket instance);
    partial void UpdateBackTicket(BackTicket instance);
    partial void DeleteBackTicket(BackTicket instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertBookedTicket(BookedTicket instance);
    partial void UpdateBookedTicket(BookedTicket instance);
    partial void DeleteBookedTicket(BookedTicket instance);
    partial void InsertCinema(Cinema instance);
    partial void UpdateCinema(Cinema instance);
    partial void DeleteCinema(Cinema instance);
    partial void InsertCinema_OnShowPlan(Cinema_OnShowPlan instance);
    partial void UpdateCinema_OnShowPlan(Cinema_OnShowPlan instance);
    partial void DeleteCinema_OnShowPlan(Cinema_OnShowPlan instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertFilm(Film instance);
    partial void UpdateFilm(Film instance);
    partial void DeleteFilm(Film instance);
    partial void InsertGlobalParameter(GlobalParameter instance);
    partial void UpdateGlobalParameter(GlobalParameter instance);
    partial void DeleteGlobalParameter(GlobalParameter instance);
    partial void InsertHistoryRecord(HistoryRecord instance);
    partial void UpdateHistoryRecord(HistoryRecord instance);
    partial void DeleteHistoryRecord(HistoryRecord instance);
    partial void InsertLoginHistory(LoginHistory instance);
    partial void UpdateLoginHistory(LoginHistory instance);
    partial void DeleteLoginHistory(LoginHistory instance);
    partial void InsertOnShowPlan(OnShowPlan instance);
    partial void UpdateOnShowPlan(OnShowPlan instance);
    partial void DeleteOnShowPlan(OnShowPlan instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertTheater(Theater instance);
    partial void UpdateTheater(Theater instance);
    partial void DeleteTheater(Theater instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public CinemaLINQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CinemaConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaLINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaLINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaLINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CinemaLINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BackTicket> BackTickets
		{
			get
			{
				return this.GetTable<BackTicket>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<BookedTicket> BookedTickets
		{
			get
			{
				return this.GetTable<BookedTicket>();
			}
		}
		
		public System.Data.Linq.Table<Cinema> Cinemas
		{
			get
			{
				return this.GetTable<Cinema>();
			}
		}
		
		public System.Data.Linq.Table<Cinema_OnShowPlan> Cinema_OnShowPlans
		{
			get
			{
				return this.GetTable<Cinema_OnShowPlan>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Film> Films
		{
			get
			{
				return this.GetTable<Film>();
			}
		}
		
		public System.Data.Linq.Table<GlobalParameter> GlobalParameters
		{
			get
			{
				return this.GetTable<GlobalParameter>();
			}
		}
		
		public System.Data.Linq.Table<HistoryRecord> HistoryRecords
		{
			get
			{
				return this.GetTable<HistoryRecord>();
			}
		}
		
		public System.Data.Linq.Table<LoginHistory> LoginHistories
		{
			get
			{
				return this.GetTable<LoginHistory>();
			}
		}
		
		public System.Data.Linq.Table<OnShowPlan> OnShowPlans
		{
			get
			{
				return this.GetTable<OnShowPlan>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Theater> Theaters
		{
			get
			{
				return this.GetTable<Theater>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BackTicket")]
	public partial class BackTicket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ID_BookedTicket;
		
		private EntityRef<BookedTicket> _BookedTicket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_BookedTicketChanging(string value);
    partial void OnID_BookedTicketChanged();
    #endregion
		
		public BackTicket()
		{
			this._BookedTicket = default(EntityRef<BookedTicket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BookedTicket", DbType="NVarChar(8)")]
		public string ID_BookedTicket
		{
			get
			{
				return this._ID_BookedTicket;
			}
			set
			{
				if ((this._ID_BookedTicket != value))
				{
					if (this._BookedTicket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BookedTicketChanging(value);
					this.SendPropertyChanging();
					this._ID_BookedTicket = value;
					this.SendPropertyChanged("ID_BookedTicket");
					this.OnID_BookedTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookedTicket_BackTicket", Storage="_BookedTicket", ThisKey="ID_BookedTicket", OtherKey="ID", IsForeignKey=true)]
		public BookedTicket BookedTicket
		{
			get
			{
				return this._BookedTicket.Entity;
			}
			set
			{
				BookedTicket previousValue = this._BookedTicket.Entity;
				if (((previousValue != value) 
							|| (this._BookedTicket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookedTicket.Entity = null;
						previousValue.BackTickets.Remove(this);
					}
					this._BookedTicket.Entity = value;
					if ((value != null))
					{
						value.BackTickets.Add(this);
						this._ID_BookedTicket = value.ID;
					}
					else
					{
						this._ID_BookedTicket = default(string);
					}
					this.SendPropertyChanged("BookedTicket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _UserRight;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserRightChanging(string value);
    partial void OnUserRightChanged();
    #endregion
		
		public UserType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRight", DbType="NVarChar(MAX)")]
		public string UserRight
		{
			get
			{
				return this._UserRight;
			}
			set
			{
				if ((this._UserRight != value))
				{
					this.OnUserRightChanging(value);
					this.SendPropertyChanging();
					this._UserRight = value;
					this.SendPropertyChanged("UserRight");
					this.OnUserRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="ID", OtherKey="ID_UserType")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookedTicket")]
	public partial class BookedTicket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ID_User;
		
		private string _ID_Film;
		
		private string _ID_Cinema;
		
		private string _ID_Seat;
		
		private System.Nullable<int> _ID_OnShowPlan;
		
		private string _Seasion;
		
		private System.Nullable<int> _SingleTickets;
		
		private System.Nullable<int> _VipTickets;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<decimal> _Price;
		
		private EntitySet<BackTicket> _BackTickets;
		
		private EntityRef<Cinema> _Cinema;
		
		private EntityRef<Film> _Film;
		
		private EntityRef<OnShowPlan> _OnShowPlan;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnID_FilmChanging(string value);
    partial void OnID_FilmChanged();
    partial void OnID_CinemaChanging(string value);
    partial void OnID_CinemaChanged();
    partial void OnID_SeatChanging(string value);
    partial void OnID_SeatChanged();
    partial void OnID_OnShowPlanChanging(System.Nullable<int> value);
    partial void OnID_OnShowPlanChanged();
    partial void OnSeasionChanging(string value);
    partial void OnSeasionChanged();
    partial void OnSingleTicketsChanging(System.Nullable<int> value);
    partial void OnSingleTicketsChanged();
    partial void OnVipTicketsChanging(System.Nullable<int> value);
    partial void OnVipTicketsChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public BookedTicket()
		{
			this._BackTickets = new EntitySet<BackTicket>(new Action<BackTicket>(this.attach_BackTickets), new Action<BackTicket>(this.detach_BackTickets));
			this._Cinema = default(EntityRef<Cinema>);
			this._Film = default(EntityRef<Film>);
			this._OnShowPlan = default(EntityRef<OnShowPlan>);
			this._Seat = default(EntityRef<Seat>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="NVarChar(6)")]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Film", DbType="NVarChar(8)")]
		public string ID_Film
		{
			get
			{
				return this._ID_Film;
			}
			set
			{
				if ((this._ID_Film != value))
				{
					if (this._Film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FilmChanging(value);
					this.SendPropertyChanging();
					this._ID_Film = value;
					this.SendPropertyChanged("ID_Film");
					this.OnID_FilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Cinema", DbType="NVarChar(4)")]
		public string ID_Cinema
		{
			get
			{
				return this._ID_Cinema;
			}
			set
			{
				if ((this._ID_Cinema != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CinemaChanging(value);
					this.SendPropertyChanging();
					this._ID_Cinema = value;
					this.SendPropertyChanged("ID_Cinema");
					this.OnID_CinemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Seat", DbType="NVarChar(6)")]
		public string ID_Seat
		{
			get
			{
				return this._ID_Seat;
			}
			set
			{
				if ((this._ID_Seat != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_SeatChanging(value);
					this.SendPropertyChanging();
					this._ID_Seat = value;
					this.SendPropertyChanged("ID_Seat");
					this.OnID_SeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OnShowPlan", DbType="Int")]
		public System.Nullable<int> ID_OnShowPlan
		{
			get
			{
				return this._ID_OnShowPlan;
			}
			set
			{
				if ((this._ID_OnShowPlan != value))
				{
					if (this._OnShowPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OnShowPlanChanging(value);
					this.SendPropertyChanging();
					this._ID_OnShowPlan = value;
					this.SendPropertyChanged("ID_OnShowPlan");
					this.OnID_OnShowPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seasion", DbType="NVarChar(30)")]
		public string Seasion
		{
			get
			{
				return this._Seasion;
			}
			set
			{
				if ((this._Seasion != value))
				{
					this.OnSeasionChanging(value);
					this.SendPropertyChanging();
					this._Seasion = value;
					this.SendPropertyChanged("Seasion");
					this.OnSeasionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleTickets", DbType="Int")]
		public System.Nullable<int> SingleTickets
		{
			get
			{
				return this._SingleTickets;
			}
			set
			{
				if ((this._SingleTickets != value))
				{
					this.OnSingleTicketsChanging(value);
					this.SendPropertyChanging();
					this._SingleTickets = value;
					this.SendPropertyChanged("SingleTickets");
					this.OnSingleTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VipTickets", DbType="Int")]
		public System.Nullable<int> VipTickets
		{
			get
			{
				return this._VipTickets;
			}
			set
			{
				if ((this._VipTickets != value))
				{
					this.OnVipTicketsChanging(value);
					this.SendPropertyChanging();
					this._VipTickets = value;
					this.SendPropertyChanged("VipTickets");
					this.OnVipTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookedTicket_BackTicket", Storage="_BackTickets", ThisKey="ID", OtherKey="ID_BookedTicket")]
		public EntitySet<BackTicket> BackTickets
		{
			get
			{
				return this._BackTickets;
			}
			set
			{
				this._BackTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_BookedTicket", Storage="_Cinema", ThisKey="ID_Cinema", OtherKey="ID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.BookedTickets.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.BookedTickets.Add(this);
						this._ID_Cinema = value.ID;
					}
					else
					{
						this._ID_Cinema = default(string);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_BookedTicket", Storage="_Film", ThisKey="ID_Film", OtherKey="ID", IsForeignKey=true)]
		public Film Film
		{
			get
			{
				return this._Film.Entity;
			}
			set
			{
				Film previousValue = this._Film.Entity;
				if (((previousValue != value) 
							|| (this._Film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film.Entity = null;
						previousValue.BookedTickets.Remove(this);
					}
					this._Film.Entity = value;
					if ((value != null))
					{
						value.BookedTickets.Add(this);
						this._ID_Film = value.ID;
					}
					else
					{
						this._ID_Film = default(string);
					}
					this.SendPropertyChanged("Film");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OnShowPlan_BookedTicket", Storage="_OnShowPlan", ThisKey="ID_OnShowPlan", OtherKey="ID", IsForeignKey=true)]
		public OnShowPlan OnShowPlan
		{
			get
			{
				return this._OnShowPlan.Entity;
			}
			set
			{
				OnShowPlan previousValue = this._OnShowPlan.Entity;
				if (((previousValue != value) 
							|| (this._OnShowPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OnShowPlan.Entity = null;
						previousValue.BookedTickets.Remove(this);
					}
					this._OnShowPlan.Entity = value;
					if ((value != null))
					{
						value.BookedTickets.Add(this);
						this._ID_OnShowPlan = value.ID;
					}
					else
					{
						this._ID_OnShowPlan = default(Nullable<int>);
					}
					this.SendPropertyChanged("OnShowPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_BookedTicket", Storage="_Seat", ThisKey="ID_Seat", OtherKey="ID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.BookedTickets.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.BookedTickets.Add(this);
						this._ID_Seat = value.ID;
					}
					else
					{
						this._ID_Seat = default(string);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookedTicket", Storage="_User", ThisKey="ID_User", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BookedTickets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BookedTickets.Add(this);
						this._ID_User = value.ID;
					}
					else
					{
						this._ID_User = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BackTickets(BackTicket entity)
		{
			this.SendPropertyChanging();
			entity.BookedTicket = this;
		}
		
		private void detach_BackTickets(BackTicket entity)
		{
			this.SendPropertyChanging();
			entity.BookedTicket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cinema")]
	public partial class Cinema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ID_Theater;
		
		private string _Name;
		
		private string _Type;
		
		private System.Nullable<int> _TotalSeat;
		
		private System.Data.Linq.Binary _Image;
		
		private EntitySet<BookedTicket> _BookedTickets;
		
		private EntitySet<Cinema_OnShowPlan> _Cinema_OnShowPlans;
		
		private EntityRef<Theater> _Theater;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnID_TheaterChanging(string value);
    partial void OnID_TheaterChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTotalSeatChanging(System.Nullable<int> value);
    partial void OnTotalSeatChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public Cinema()
		{
			this._BookedTickets = new EntitySet<BookedTicket>(new Action<BookedTicket>(this.attach_BookedTickets), new Action<BookedTicket>(this.detach_BookedTickets));
			this._Cinema_OnShowPlans = new EntitySet<Cinema_OnShowPlan>(new Action<Cinema_OnShowPlan>(this.attach_Cinema_OnShowPlans), new Action<Cinema_OnShowPlan>(this.detach_Cinema_OnShowPlans));
			this._Theater = default(EntityRef<Theater>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Theater", DbType="NVarChar(4)")]
		public string ID_Theater
		{
			get
			{
				return this._ID_Theater;
			}
			set
			{
				if ((this._ID_Theater != value))
				{
					if (this._Theater.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TheaterChanging(value);
					this.SendPropertyChanging();
					this._ID_Theater = value;
					this.SendPropertyChanged("ID_Theater");
					this.OnID_TheaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(6)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSeat", DbType="Int")]
		public System.Nullable<int> TotalSeat
		{
			get
			{
				return this._TotalSeat;
			}
			set
			{
				if ((this._TotalSeat != value))
				{
					this.OnTotalSeatChanging(value);
					this.SendPropertyChanging();
					this._TotalSeat = value;
					this.SendPropertyChanged("TotalSeat");
					this.OnTotalSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_BookedTicket", Storage="_BookedTickets", ThisKey="ID", OtherKey="ID_Cinema")]
		public EntitySet<BookedTicket> BookedTickets
		{
			get
			{
				return this._BookedTickets;
			}
			set
			{
				this._BookedTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Cinema_OnShowPlan", Storage="_Cinema_OnShowPlans", ThisKey="ID", OtherKey="ID_Cinema")]
		public EntitySet<Cinema_OnShowPlan> Cinema_OnShowPlans
		{
			get
			{
				return this._Cinema_OnShowPlans;
			}
			set
			{
				this._Cinema_OnShowPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_Cinema", Storage="_Theater", ThisKey="ID_Theater", OtherKey="ID", IsForeignKey=true)]
		public Theater Theater
		{
			get
			{
				return this._Theater.Entity;
			}
			set
			{
				Theater previousValue = this._Theater.Entity;
				if (((previousValue != value) 
							|| (this._Theater.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theater.Entity = null;
						previousValue.Cinemas.Remove(this);
					}
					this._Theater.Entity = value;
					if ((value != null))
					{
						value.Cinemas.Add(this);
						this._ID_Theater = value.ID;
					}
					else
					{
						this._ID_Theater = default(string);
					}
					this.SendPropertyChanged("Theater");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
		
		private void attach_Cinema_OnShowPlans(Cinema_OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_Cinema_OnShowPlans(Cinema_OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cinema_OnShowPlan")]
	public partial class Cinema_OnShowPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_Cinema;
		
		private int _ID_OnShowPlan;
		
		private EntityRef<Cinema> _Cinema;
		
		private EntityRef<OnShowPlan> _OnShowPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CinemaChanging(string value);
    partial void OnID_CinemaChanged();
    partial void OnID_OnShowPlanChanging(int value);
    partial void OnID_OnShowPlanChanged();
    #endregion
		
		public Cinema_OnShowPlan()
		{
			this._Cinema = default(EntityRef<Cinema>);
			this._OnShowPlan = default(EntityRef<OnShowPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Cinema", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_Cinema
		{
			get
			{
				return this._ID_Cinema;
			}
			set
			{
				if ((this._ID_Cinema != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CinemaChanging(value);
					this.SendPropertyChanging();
					this._ID_Cinema = value;
					this.SendPropertyChanged("ID_Cinema");
					this.OnID_CinemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OnShowPlan", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_OnShowPlan
		{
			get
			{
				return this._ID_OnShowPlan;
			}
			set
			{
				if ((this._ID_OnShowPlan != value))
				{
					if (this._OnShowPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OnShowPlanChanging(value);
					this.SendPropertyChanging();
					this._ID_OnShowPlan = value;
					this.SendPropertyChanged("ID_OnShowPlan");
					this.OnID_OnShowPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Cinema_OnShowPlan", Storage="_Cinema", ThisKey="ID_Cinema", OtherKey="ID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.Cinema_OnShowPlans.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.Cinema_OnShowPlans.Add(this);
						this._ID_Cinema = value.ID;
					}
					else
					{
						this._ID_Cinema = default(string);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OnShowPlan_Cinema_OnShowPlan", Storage="_OnShowPlan", ThisKey="ID_OnShowPlan", OtherKey="ID", IsForeignKey=true)]
		public OnShowPlan OnShowPlan
		{
			get
			{
				return this._OnShowPlan.Entity;
			}
			set
			{
				OnShowPlan previousValue = this._OnShowPlan.Entity;
				if (((previousValue != value) 
							|| (this._OnShowPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OnShowPlan.Entity = null;
						previousValue.Cinema_OnShowPlans.Remove(this);
					}
					this._OnShowPlan.Entity = value;
					if ((value != null))
					{
						value.Cinema_OnShowPlans.Add(this);
						this._ID_OnShowPlan = value.ID;
					}
					else
					{
						this._ID_OnShowPlan = default(int);
					}
					this.SendPropertyChanged("OnShowPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ID_User;
		
		private string _ID_Film;
		
		private string _Comment1;
		
		private EntityRef<Film> _Film;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnID_FilmChanging(string value);
    partial void OnID_FilmChanged();
    partial void OnComment1Changing(string value);
    partial void OnComment1Changed();
    #endregion
		
		public Comment()
		{
			this._Film = default(EntityRef<Film>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="NVarChar(6)")]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Film", DbType="NVarChar(8)")]
		public string ID_Film
		{
			get
			{
				return this._ID_Film;
			}
			set
			{
				if ((this._ID_Film != value))
				{
					if (this._Film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FilmChanging(value);
					this.SendPropertyChanging();
					this._ID_Film = value;
					this.SendPropertyChanged("ID_Film");
					this.OnID_FilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_Comment1", DbType="NVarChar(MAX)")]
		public string Comment1
		{
			get
			{
				return this._Comment1;
			}
			set
			{
				if ((this._Comment1 != value))
				{
					this.OnComment1Changing(value);
					this.SendPropertyChanging();
					this._Comment1 = value;
					this.SendPropertyChanged("Comment1");
					this.OnComment1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Comment", Storage="_Film", ThisKey="ID_Film", OtherKey="ID", IsForeignKey=true)]
		public Film Film
		{
			get
			{
				return this._Film.Entity;
			}
			set
			{
				Film previousValue = this._Film.Entity;
				if (((previousValue != value) 
							|| (this._Film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Film.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ID_Film = value.ID;
					}
					else
					{
						this._ID_Film = default(string);
					}
					this.SendPropertyChanged("Film");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="ID_User", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ID_User = value.ID;
					}
					else
					{
						this._ID_User = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Film")]
	public partial class Film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Type;
		
		private string _Director;
		
		private string _LeadActors;
		
		private string _PlayWright;
		
		private string _BriefStory;
		
		private string _PlaybillAdd;
		
		private System.Nullable<int> _Rate;
		
		private System.Nullable<int> _Length;
		
		private EntitySet<BookedTicket> _BookedTickets;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<HistoryRecord> _HistoryRecords;
		
		private EntitySet<OnShowPlan> _OnShowPlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    partial void OnLeadActorsChanging(string value);
    partial void OnLeadActorsChanged();
    partial void OnPlayWrightChanging(string value);
    partial void OnPlayWrightChanged();
    partial void OnBriefStoryChanging(string value);
    partial void OnBriefStoryChanged();
    partial void OnPlaybillAddChanging(string value);
    partial void OnPlaybillAddChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    #endregion
		
		public Film()
		{
			this._BookedTickets = new EntitySet<BookedTicket>(new Action<BookedTicket>(this.attach_BookedTickets), new Action<BookedTicket>(this.detach_BookedTickets));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._HistoryRecords = new EntitySet<HistoryRecord>(new Action<HistoryRecord>(this.attach_HistoryRecords), new Action<HistoryRecord>(this.detach_HistoryRecords));
			this._OnShowPlans = new EntitySet<OnShowPlan>(new Action<OnShowPlan>(this.attach_OnShowPlans), new Action<OnShowPlan>(this.detach_OnShowPlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Director", DbType="NVarChar(MAX)")]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadActors", DbType="NVarChar(MAX)")]
		public string LeadActors
		{
			get
			{
				return this._LeadActors;
			}
			set
			{
				if ((this._LeadActors != value))
				{
					this.OnLeadActorsChanging(value);
					this.SendPropertyChanging();
					this._LeadActors = value;
					this.SendPropertyChanged("LeadActors");
					this.OnLeadActorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayWright", DbType="NVarChar(MAX)")]
		public string PlayWright
		{
			get
			{
				return this._PlayWright;
			}
			set
			{
				if ((this._PlayWright != value))
				{
					this.OnPlayWrightChanging(value);
					this.SendPropertyChanging();
					this._PlayWright = value;
					this.SendPropertyChanged("PlayWright");
					this.OnPlayWrightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BriefStory", DbType="NVarChar(MAX)")]
		public string BriefStory
		{
			get
			{
				return this._BriefStory;
			}
			set
			{
				if ((this._BriefStory != value))
				{
					this.OnBriefStoryChanging(value);
					this.SendPropertyChanging();
					this._BriefStory = value;
					this.SendPropertyChanged("BriefStory");
					this.OnBriefStoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaybillAdd", DbType="NVarChar(MAX)")]
		public string PlaybillAdd
		{
			get
			{
				return this._PlaybillAdd;
			}
			set
			{
				if ((this._PlaybillAdd != value))
				{
					this.OnPlaybillAddChanging(value);
					this.SendPropertyChanging();
					this._PlaybillAdd = value;
					this.SendPropertyChanged("PlaybillAdd");
					this.OnPlaybillAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_BookedTicket", Storage="_BookedTickets", ThisKey="ID", OtherKey="ID_Film")]
		public EntitySet<BookedTicket> BookedTickets
		{
			get
			{
				return this._BookedTickets;
			}
			set
			{
				this._BookedTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ID_Film")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_HistoryRecord", Storage="_HistoryRecords", ThisKey="ID", OtherKey="ID_Film")]
		public EntitySet<HistoryRecord> HistoryRecords
		{
			get
			{
				return this._HistoryRecords;
			}
			set
			{
				this._HistoryRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_OnShowPlan", Storage="_OnShowPlans", ThisKey="ID", OtherKey="ID_Film")]
		public EntitySet<OnShowPlan> OnShowPlans
		{
			get
			{
				return this._OnShowPlans;
			}
			set
			{
				this._OnShowPlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Film = this;
		}
		
		private void detach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Film = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Film = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Film = null;
		}
		
		private void attach_HistoryRecords(HistoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Film = this;
		}
		
		private void detach_HistoryRecords(HistoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Film = null;
		}
		
		private void attach_OnShowPlans(OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.Film = this;
		}
		
		private void detach_OnShowPlans(OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.Film = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalParameter")]
	public partial class GlobalParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private float _IdleTimeLimit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnIdleTimeLimitChanging(float value);
    partial void OnIdleTimeLimitChanged();
    #endregion
		
		public GlobalParameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdleTimeLimit", DbType="Real NOT NULL")]
		public float IdleTimeLimit
		{
			get
			{
				return this._IdleTimeLimit;
			}
			set
			{
				if ((this._IdleTimeLimit != value))
				{
					this.OnIdleTimeLimitChanging(value);
					this.SendPropertyChanging();
					this._IdleTimeLimit = value;
					this.SendPropertyChanged("IdleTimeLimit");
					this.OnIdleTimeLimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoryRecord")]
	public partial class HistoryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ID_Film;
		
		private System.Nullable<int> _SingleTicketsSold;
		
		private System.Nullable<int> _VIPTicketsSold;
		
		private System.Nullable<decimal> _Total;
		
		private EntityRef<Film> _Film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_FilmChanging(string value);
    partial void OnID_FilmChanged();
    partial void OnSingleTicketsSoldChanging(System.Nullable<int> value);
    partial void OnSingleTicketsSoldChanged();
    partial void OnVIPTicketsSoldChanging(System.Nullable<int> value);
    partial void OnVIPTicketsSoldChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    #endregion
		
		public HistoryRecord()
		{
			this._Film = default(EntityRef<Film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Film", DbType="NVarChar(8)")]
		public string ID_Film
		{
			get
			{
				return this._ID_Film;
			}
			set
			{
				if ((this._ID_Film != value))
				{
					if (this._Film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FilmChanging(value);
					this.SendPropertyChanging();
					this._ID_Film = value;
					this.SendPropertyChanged("ID_Film");
					this.OnID_FilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleTicketsSold", DbType="Int")]
		public System.Nullable<int> SingleTicketsSold
		{
			get
			{
				return this._SingleTicketsSold;
			}
			set
			{
				if ((this._SingleTicketsSold != value))
				{
					this.OnSingleTicketsSoldChanging(value);
					this.SendPropertyChanging();
					this._SingleTicketsSold = value;
					this.SendPropertyChanged("SingleTicketsSold");
					this.OnSingleTicketsSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPTicketsSold", DbType="Int")]
		public System.Nullable<int> VIPTicketsSold
		{
			get
			{
				return this._VIPTicketsSold;
			}
			set
			{
				if ((this._VIPTicketsSold != value))
				{
					this.OnVIPTicketsSoldChanging(value);
					this.SendPropertyChanging();
					this._VIPTicketsSold = value;
					this.SendPropertyChanged("VIPTicketsSold");
					this.OnVIPTicketsSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_HistoryRecord", Storage="_Film", ThisKey="ID_Film", OtherKey="ID", IsForeignKey=true)]
		public Film Film
		{
			get
			{
				return this._Film.Entity;
			}
			set
			{
				Film previousValue = this._Film.Entity;
				if (((previousValue != value) 
							|| (this._Film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film.Entity = null;
						previousValue.HistoryRecords.Remove(this);
					}
					this._Film.Entity = value;
					if ((value != null))
					{
						value.HistoryRecords.Add(this);
						this._ID_Film = value.ID;
					}
					else
					{
						this._ID_Film = default(string);
					}
					this.SendPropertyChanged("Film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginHistory")]
	public partial class LoginHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ID_User;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private System.Nullable<System.DateTime> _LogoutTime;
		
		private System.Nullable<int> _SingleTickets;
		
		private System.Nullable<int> _VIPTickets;
		
		private System.Nullable<int> _BackTickets;
		
		private System.Nullable<decimal> _Total;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_UserChanging(string value);
    partial void OnID_UserChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    partial void OnLogoutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogoutTimeChanged();
    partial void OnSingleTicketsChanging(System.Nullable<int> value);
    partial void OnSingleTicketsChanged();
    partial void OnVIPTicketsChanging(System.Nullable<int> value);
    partial void OnVIPTicketsChanged();
    partial void OnBackTicketsChanging(System.Nullable<int> value);
    partial void OnBackTicketsChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    #endregion
		
		public LoginHistory()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_User", DbType="NVarChar(6)")]
		public string ID_User
		{
			get
			{
				return this._ID_User;
			}
			set
			{
				if ((this._ID_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserChanging(value);
					this.SendPropertyChanging();
					this._ID_User = value;
					this.SendPropertyChanged("ID_User");
					this.OnID_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoutTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogoutTime
		{
			get
			{
				return this._LogoutTime;
			}
			set
			{
				if ((this._LogoutTime != value))
				{
					this.OnLogoutTimeChanging(value);
					this.SendPropertyChanging();
					this._LogoutTime = value;
					this.SendPropertyChanged("LogoutTime");
					this.OnLogoutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleTickets", DbType="Int")]
		public System.Nullable<int> SingleTickets
		{
			get
			{
				return this._SingleTickets;
			}
			set
			{
				if ((this._SingleTickets != value))
				{
					this.OnSingleTicketsChanging(value);
					this.SendPropertyChanging();
					this._SingleTickets = value;
					this.SendPropertyChanged("SingleTickets");
					this.OnSingleTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIPTickets", DbType="Int")]
		public System.Nullable<int> VIPTickets
		{
			get
			{
				return this._VIPTickets;
			}
			set
			{
				if ((this._VIPTickets != value))
				{
					this.OnVIPTicketsChanging(value);
					this.SendPropertyChanging();
					this._VIPTickets = value;
					this.SendPropertyChanged("VIPTickets");
					this.OnVIPTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackTickets", DbType="Int")]
		public System.Nullable<int> BackTickets
		{
			get
			{
				return this._BackTickets;
			}
			set
			{
				if ((this._BackTickets != value))
				{
					this.OnBackTicketsChanging(value);
					this.SendPropertyChanging();
					this._BackTickets = value;
					this.SendPropertyChanged("BackTickets");
					this.OnBackTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginHistory", Storage="_User", ThisKey="ID_User", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LoginHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LoginHistories.Add(this);
						this._ID_User = value.ID;
					}
					else
					{
						this._ID_User = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OnShowPlan")]
	public partial class OnShowPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ID_Film;
		
		private System.Nullable<System.DateTime> _OnShowDate;
		
		private System.Nullable<System.DateTime> _OnShowEnd;
		
		private System.Nullable<int> _WaitingTime;
		
		private string _Seasion;
		
		private EntitySet<BookedTicket> _BookedTickets;
		
		private EntitySet<Cinema_OnShowPlan> _Cinema_OnShowPlans;
		
		private EntityRef<Film> _Film;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_FilmChanging(string value);
    partial void OnID_FilmChanged();
    partial void OnOnShowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOnShowDateChanged();
    partial void OnOnShowEndChanging(System.Nullable<System.DateTime> value);
    partial void OnOnShowEndChanged();
    partial void OnWaitingTimeChanging(System.Nullable<int> value);
    partial void OnWaitingTimeChanged();
    partial void OnSeasionChanging(string value);
    partial void OnSeasionChanged();
    #endregion
		
		public OnShowPlan()
		{
			this._BookedTickets = new EntitySet<BookedTicket>(new Action<BookedTicket>(this.attach_BookedTickets), new Action<BookedTicket>(this.detach_BookedTickets));
			this._Cinema_OnShowPlans = new EntitySet<Cinema_OnShowPlan>(new Action<Cinema_OnShowPlan>(this.attach_Cinema_OnShowPlans), new Action<Cinema_OnShowPlan>(this.detach_Cinema_OnShowPlans));
			this._Film = default(EntityRef<Film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Film", DbType="NVarChar(8)")]
		public string ID_Film
		{
			get
			{
				return this._ID_Film;
			}
			set
			{
				if ((this._ID_Film != value))
				{
					if (this._Film.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FilmChanging(value);
					this.SendPropertyChanging();
					this._ID_Film = value;
					this.SendPropertyChanged("ID_Film");
					this.OnID_FilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnShowDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OnShowDate
		{
			get
			{
				return this._OnShowDate;
			}
			set
			{
				if ((this._OnShowDate != value))
				{
					this.OnOnShowDateChanging(value);
					this.SendPropertyChanging();
					this._OnShowDate = value;
					this.SendPropertyChanged("OnShowDate");
					this.OnOnShowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnShowEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> OnShowEnd
		{
			get
			{
				return this._OnShowEnd;
			}
			set
			{
				if ((this._OnShowEnd != value))
				{
					this.OnOnShowEndChanging(value);
					this.SendPropertyChanging();
					this._OnShowEnd = value;
					this.SendPropertyChanged("OnShowEnd");
					this.OnOnShowEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaitingTime", DbType="Int")]
		public System.Nullable<int> WaitingTime
		{
			get
			{
				return this._WaitingTime;
			}
			set
			{
				if ((this._WaitingTime != value))
				{
					this.OnWaitingTimeChanging(value);
					this.SendPropertyChanging();
					this._WaitingTime = value;
					this.SendPropertyChanged("WaitingTime");
					this.OnWaitingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seasion", DbType="NVarChar(MAX)")]
		public string Seasion
		{
			get
			{
				return this._Seasion;
			}
			set
			{
				if ((this._Seasion != value))
				{
					this.OnSeasionChanging(value);
					this.SendPropertyChanging();
					this._Seasion = value;
					this.SendPropertyChanged("Seasion");
					this.OnSeasionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OnShowPlan_BookedTicket", Storage="_BookedTickets", ThisKey="ID", OtherKey="ID_OnShowPlan")]
		public EntitySet<BookedTicket> BookedTickets
		{
			get
			{
				return this._BookedTickets;
			}
			set
			{
				this._BookedTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OnShowPlan_Cinema_OnShowPlan", Storage="_Cinema_OnShowPlans", ThisKey="ID", OtherKey="ID_OnShowPlan")]
		public EntitySet<Cinema_OnShowPlan> Cinema_OnShowPlans
		{
			get
			{
				return this._Cinema_OnShowPlans;
			}
			set
			{
				this._Cinema_OnShowPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_OnShowPlan", Storage="_Film", ThisKey="ID_Film", OtherKey="ID", IsForeignKey=true)]
		public Film Film
		{
			get
			{
				return this._Film.Entity;
			}
			set
			{
				Film previousValue = this._Film.Entity;
				if (((previousValue != value) 
							|| (this._Film.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film.Entity = null;
						previousValue.OnShowPlans.Remove(this);
					}
					this._Film.Entity = value;
					if ((value != null))
					{
						value.OnShowPlans.Add(this);
						this._ID_Film = value.ID;
					}
					else
					{
						this._ID_Film = default(string);
					}
					this.SendPropertyChanged("Film");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.OnShowPlan = this;
		}
		
		private void detach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.OnShowPlan = null;
		}
		
		private void attach_Cinema_OnShowPlans(Cinema_OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.OnShowPlan = this;
		}
		
		private void detach_Cinema_OnShowPlans(Cinema_OnShowPlan entity)
		{
			this.SendPropertyChanging();
			entity.OnShowPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<int> _TypeSeat;
		
		private EntitySet<BookedTicket> _BookedTickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTypeSeatChanging(System.Nullable<int> value);
    partial void OnTypeSeatChanged();
    #endregion
		
		public Seat()
		{
			this._BookedTickets = new EntitySet<BookedTicket>(new Action<BookedTicket>(this.attach_BookedTickets), new Action<BookedTicket>(this.detach_BookedTickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeSeat", DbType="Int")]
		public System.Nullable<int> TypeSeat
		{
			get
			{
				return this._TypeSeat;
			}
			set
			{
				if ((this._TypeSeat != value))
				{
					this.OnTypeSeatChanging(value);
					this.SendPropertyChanging();
					this._TypeSeat = value;
					this.SendPropertyChanged("TypeSeat");
					this.OnTypeSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_BookedTicket", Storage="_BookedTickets", ThisKey="ID", OtherKey="ID_Seat")]
		public EntitySet<BookedTicket> BookedTickets
		{
			get
			{
				return this._BookedTickets;
			}
			set
			{
				this._BookedTickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theater")]
	public partial class Theater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _LocationCity;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Data.Linq.Binary _Image;
		
		private EntitySet<Cinema> _Cinemas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationCityChanging(string value);
    partial void OnLocationCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public Theater()
		{
			this._Cinemas = new EntitySet<Cinema>(new Action<Cinema>(this.attach_Cinemas), new Action<Cinema>(this.detach_Cinemas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCity", DbType="NVarChar(30)")]
		public string LocationCity
		{
			get
			{
				return this._LocationCity;
			}
			set
			{
				if ((this._LocationCity != value))
				{
					this.OnLocationCityChanging(value);
					this.SendPropertyChanging();
					this._LocationCity = value;
					this.SendPropertyChanged("LocationCity");
					this.OnLocationCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_Cinema", Storage="_Cinemas", ThisKey="ID", OtherKey="ID_Theater")]
		public EntitySet<Cinema> Cinemas
		{
			get
			{
				return this._Cinemas;
			}
			set
			{
				this._Cinemas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cinemas(Cinema entity)
		{
			this.SendPropertyChanging();
			entity.Theater = this;
		}
		
		private void detach_Cinemas(Cinema entity)
		{
			this.SendPropertyChanging();
			entity.Theater = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ID_UserType;
		
		private string _Name;
		
		private string _Password;
		
		private System.Nullable<int> _Online;
		
		private System.Nullable<System.DateTime> _LastAction;
		
		private System.Nullable<decimal> _Balance;
		
		private EntitySet<BookedTicket> _BookedTickets;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<LoginHistory> _LoginHistories;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnID_UserTypeChanging(string value);
    partial void OnID_UserTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnOnlineChanging(System.Nullable<int> value);
    partial void OnOnlineChanged();
    partial void OnLastActionChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActionChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    #endregion
		
		public User()
		{
			this._BookedTickets = new EntitySet<BookedTicket>(new Action<BookedTicket>(this.attach_BookedTickets), new Action<BookedTicket>(this.detach_BookedTickets));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._LoginHistories = new EntitySet<LoginHistory>(new Action<LoginHistory>(this.attach_LoginHistories), new Action<LoginHistory>(this.detach_LoginHistories));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_UserType", DbType="NVarChar(4)")]
		public string ID_UserType
		{
			get
			{
				return this._ID_UserType;
			}
			set
			{
				if ((this._ID_UserType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_UserTypeChanging(value);
					this.SendPropertyChanging();
					this._ID_UserType = value;
					this.SendPropertyChanged("ID_UserType");
					this.OnID_UserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Online", DbType="Int")]
		public System.Nullable<int> Online
		{
			get
			{
				return this._Online;
			}
			set
			{
				if ((this._Online != value))
				{
					this.OnOnlineChanging(value);
					this.SendPropertyChanging();
					this._Online = value;
					this.SendPropertyChanged("Online");
					this.OnOnlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAction", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastAction
		{
			get
			{
				return this._LastAction;
			}
			set
			{
				if ((this._LastAction != value))
				{
					this.OnLastActionChanging(value);
					this.SendPropertyChanging();
					this._LastAction = value;
					this.SendPropertyChanged("LastAction");
					this.OnLastActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Money")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookedTicket", Storage="_BookedTickets", ThisKey="ID", OtherKey="ID_User")]
		public EntitySet<BookedTicket> BookedTickets
		{
			get
			{
				return this._BookedTickets;
			}
			set
			{
				this._BookedTickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ID_User")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LoginHistory", Storage="_LoginHistories", ThisKey="ID", OtherKey="ID_User")]
		public EntitySet<LoginHistory> LoginHistories
		{
			get
			{
				return this._LoginHistories;
			}
			set
			{
				this._LoginHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="ID_UserType", OtherKey="ID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ID_UserType = value.ID;
					}
					else
					{
						this._ID_UserType = default(string);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BookedTickets(BookedTicket entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
